version: 2.1

dockernode: &docker_node
    docker:
      - image: circleci/node:13.8.0
      
dockeraws: &docker_awscli
    docker:
      - image: amazon/aws-cli
      
dockeransible: &docker_ansible
    docker:
      - image: python:3.7-alpine3.11 
      
##### Parameters list #######

parameters:
  circi_workflow_id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID}"
    
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      circi_workflow_id:
        type: string
        
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            apk add --no-cache python3 py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install awscli \
            && rm -rf /var/cache/apk/*
            echo "Destroying environment: <<parameters.circi_workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-c3-backend-<<parameters.circi_workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-c3-frontend-<<parameters.circi_workflow_id>>
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    parameters:
      circi_workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          command: |
              status=$(curl -H "token: 0624f908-8a6e-4374-98f8-2fd63522646f" --request GET https://api.memstash.io/values/migration_status__<<parameters.workflow_id>>)
              echo $status
              if [[ "$status" == "db_success" ]]
              then
                apk add --update tar gzip curl nodejs npm
                npm run migrations:revert
              fi
            
#### Building front-end #####

jobs:
  build-frontend:
    <<: *docker_node

    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
            
#### Building back-end #####

  build-backend:
    <<: *docker_node
    
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *docker_node
    
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run tests for frontend
          working_directory: ./frontend
          command:               
              npm i
              npm test
              
  test-backend:
    <<: *docker_node
 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run tests for backend
          working_directory: ./backend
          command: 
              npm i
              npm test
            
  scan-frontend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]      
      - run:
          name: frontend security check
          working_directory: ./frontend
          command: |
            npm i # added to fix oAuth package 
            npm audit fix --audit-level=critical --force

  scan-backend:
    <<: *docker_node
 
    steps:
      - checkout  
      - restore_cache:
          keys: [backend-build]          
      - run:
          name: backend security check
          working_directory: ./backend
          command: 
            npm audit fix --audit-level=critical --force


#### Infrastructure Deployment ####

  deploy-infrastructure:
    <<: *docker_awscli
    
    steps:
      - checkout
      - run:
          name: install dependancy
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-c3-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="udap-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ap-south-1
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-c3-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="udap-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ap-south-1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLICIP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLICIP:3030" > ~/output.txt
            echo "$BACKEND_AWS_PUBLICIP" >> .circleci/ansible/inventory.txt                 
            cat ~/output.txt 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - output.txt
      - destroy-environment:
          circi_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  configure-infrastructure:
    <<: *docker_ansible
    
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["46:6e:23:f0:00:75:c4:3b:11:a6:f4:46:3f:41:47:97"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible            
      - run:
          name: Configure server
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
            echo ENVIRONMENT=production > "backend/.env"            
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml            
            cat backend/.env
           # ls backend
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment:
          circi_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   

  run-migrations:
    <<: *docker_node

    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |            
            npm install            
            npm run build
            npm run migrations >> migration_output.txt
            cat migration_output.txt    
      - run:
          name: store migration result in memstash
          working_directory: ./backend
          command: |
            if [grep -q "executed successfully" migration_output.txt]
            then
              echo "DB migration was successful"
              curl -H "Content-Type: text/plain" -H "token: 0624f908-8a6e-4374-98f8-2fd63522646f" --request PUT --data "db_success" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed, looks like already exists...moving on."
              curl -H "Content-Type: text/plain" -H "token: 0624f908-8a6e-4374-98f8-2fd63522646f" --request PUT --data "db_failure" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"                    
      - destroy-environment:          
          circi_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    <<: *docker_awscli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update curl tar
            npm install webpack-dev-server -g
            npm install
            pip install awscli
      - run:
          name: Frame and put backend url to env file
          command: |
            export API_URL=`cat ~/output.txt`
            echo "API_URL: $API_URL"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            npm i
            npm install typescript@rc
            npm run build
      - run:
          name: copy frontend package to aws s3 bucket
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeople-c3-udap-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy-environment:
          circi_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
                    
  deploy-backend:
    <<: *docker_ansible
    
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["46:6e:23:f0:00:75:c4:3b:11:a6:f4:46:3f:41:47:97"]
      - attach_workspace:
          at: ~/
      - run: 
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update ansible zip
            apk add --update openssh-client tar gzip
            pip install awscli
      - run:
          name: Build backend app
          command: |
            cd ~/project/backend
            ls
            cd ../
            cd backend/ && tar -zcvf ../backend.tar.gz . && cd - 
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv backend.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: Deploy backend Setup EC2 instance & copy compiled backend to the EC2 instance
          command: |
            # ls ~/project/.circleci/ansible/roles/deploy/files/
            cd ~/project/backend
            ansible-galaxy install weareinteractive.environment
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/node-explorer.yml
      - destroy-environment:
          circi_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

### smoke test ###

  smoke-test:
    <<: *docker_ansible    
      
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: retrive backend url
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
            ls
            cat ~/output.txt
            export API_URL=`cat ~/output.txt`
            echo "API_URL: $API_URL"
      - run:
          name: backend smoke test
          command: |            
            if curl -s $API_URL/api/status
            then
              return 1
            else
              return 0
            fi
      - run:
          name: Frontend smoke test
          command: |
            if curl -s http://udapeople-c3-udap-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-2.amazonaws.com/ | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          circi_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          circi_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend,test-frontend,test-backend,scan-frontend,scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [run-migrations]   
     #    requires: [configure-infrastructure] 
      - deploy-frontend:
          requires: [run-migrations,deploy-backend]
    #     requires: [configure-infrastructure,deploy-backend]
      - smoke-test:
           requires: [deploy-backend, deploy-frontend]
 #     - cloudfront-update:
 #         requires: [smoke-test]
 #     - cleanup:
 #         requires: [cloudfront-update]
